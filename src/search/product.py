import pandas as pd
import re
import time
from bs4 import BeautifulSoup

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException

import numpy as np


def buscar_precos(driver, produto):
    """
    Busca o produto no Google Shopping, extrai os pre√ßos, filtra os outliers
    usando desvio padr√£o e retorna o m√≠nimo e m√°ximo dos pre√ßos restantes.
    """
    query = produto.replace(' ', '+')
    url = f"https://www.google.com/search?tbm=shop&q={query}"
    SELETOR_PRECO_ARIA = 'span[aria-label^="Current price:"]'

    try:
        driver.get(url)
        if 'sorry/index' in driver.current_url:
            print("\nüö® CAPTCHA DETECTADO! üö®")
            input("Resolva o CAPTCHA no navegador e, DEPOIS, pressione Enter aqui para continuar...")
            print("Continuando a busca...")
            time.sleep(2)

        wait = WebDriverWait(driver, 10)
        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, SELETOR_PRECO_ARIA)))

        html_content = driver.page_source
        soup = BeautifulSoup(html_content, 'lxml')
        elementos_preco = soup.select(SELETOR_PRECO_ARIA)

        if not elementos_preco:
            return 'N√£o encontrado', 'N√£o encontrado'

        precos = []
        for el in elementos_preco:
            preco_texto = el.get_text(strip=True)
            preco_limpo = re.sub(r'[^\d,]', '', preco_texto).replace(',', '.')
            if preco_limpo:
                precos.append(float(preco_limpo)/100)

        if not precos:
            return 'N√£o encontrado', 'N√£o encontrado'

        # --- NOVO BLOCO DE FILTRAGEM ESTAT√çSTICA ---

        # 1. Se tivermos poucos pre√ßos, n√£o faz sentido calcular o desvio padr√£o.
        if len(precos) < 3:
            return min(precos), max(precos)

        # 2. Converter a lista de pre√ßos para um array NumPy para c√°lculos eficientes.
        precos_array = np.array(precos)

        # 3. Calcular a m√©dia e o desvio padr√£o.
        media = np.mean(precos_array)
        desvio_padrao = np.std(precos_array)

        print(f"  -> An√°lise Estat√≠stica: M√©dia=R${media:.2f}, Desvio Padr√£o=R${desvio_padrao:.2f}")

        # 4. Definir os limites (vamos usar 1x o desvio padr√£o como padr√£o).
        limite_inferior = media - (desvio_padrao * 1)
        limite_superior = media + (desvio_padrao * 1)

        # 5. Filtrar a lista, mantendo apenas os pre√ßos dentro dos limites.
        precos_filtrados = [p for p in precos if limite_inferior <= p <= limite_superior]

        print(f"  -> {len(precos) - len(precos_filtrados)} pre√ßo(s) removido(s) como outlier(s).")

        # 6. Se o filtro removeu todos os pre√ßos, retornamos os originais como fallback.
        if not precos_filtrados:
            return min(precos), max(precos)

        # 7. Retornar o m√≠nimo e m√°ximo da lista J√Å FILTRADA.
        return min(precos_filtrados), max(precos_filtrados)

    except TimeoutException:
        # ... (c√≥digo de erro continua o mesmo)
        print(f"Tempo esgotado para '{produto}'. O seletor '{SELETOR_PRECO_ARIA}' n√£o foi encontrado.")
        return 'Seletor n√£o encontrado', 'Seletor n√£o encontrado'
    except Exception as e:
        # ... (c√≥digo de erro continua o mesmo)
        print(f"Ocorreu um erro inesperado ao buscar '{produto}': {e}")
        return 'Erro inesperado', 'Erro inesperado'


# --- In√≠cio do Script Principal ---
# (As configura√ß√µes iniciais do driver continuam as mesmas)
service = Service(ChromeDriverManager().install())
options = webdriver.ChromeOptions()
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option('useAutomationExtension', False)
options.add_argument("--disable-blink-features=AutomationControlled")
# options.add_argument("--headless") # Mantenha comentado para depurar
options.add_argument("--window-size=1920,1080")
options.add_argument(
    "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36")

driver = webdriver.Chrome(service=service, options=options)

try:
    # O fluxo principal agora √© simples e direto, sem a necessidade de descoberta din√¢mica.
    df_entrada = pd.read_excel('../resources/produtos.xlsx')
    lista_produtos = df_entrada['Produto'].tolist()
    dados_finais = []

    for produto in lista_produtos:
        print(f"Buscando pre√ßos para: '{produto}'...")
        preco_min, preco_max = buscar_precos(driver, produto)
        dados_finais.append({
            'Produto': produto,
            'Preco_Minimo': preco_min,
            'Preco_Maximo': preco_max
        })
        print(f"  -> M√≠nimo: R$ {preco_min} | M√°ximo: R$ {preco_max}")
        # Aumentar um pouco a pausa pode ajudar a evitar CAPTCHAs futuros
        time.sleep(2)

    df_saida = pd.DataFrame(dados_finais)
    df_saida.to_excel('precos_encontrados.xlsx', index=False)
    print("\nüéâ Processo conclu√≠do! Resultados salvos em 'precos_encontrados.xlsx'")

finally:
    if driver:
        driver.quit()